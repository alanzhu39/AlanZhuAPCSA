import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  /** Method to set the blue to 0 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setBlue(0);
      }
    }
  }
  
  /** Method that mirrors the picture around a 
    * vertical mirror in the center of the picture
    * from left to right */
  public void mirrorVertical()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int width = pixels[0].length;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; col < width / 2; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][width - 1 - col];
        rightPixel.setColor(leftPixel.getColor());
      }
    } 
  }
  
  /** Mirror just part of a picture of a temple */
  public void mirrorTemple()
  {
    int mirrorPoint = 276;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();
    
    // loop through the rows
    for (int row = 27; row < 97; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 13; col < mirrorPoint; col++)
      {
        
        leftPixel = pixels[row][col];      
        rightPixel = pixels[row]                       
                         [mirrorPoint - col + mirrorPoint];
        rightPixel.setColor(leftPixel.getColor());
        count++;
      }
    }
    System.out.println(count);
  }
  
  /** copy from the passed fromPic to the
    * specified startRow and startCol in the
    * current picture
    * @param fromPic the picture to copy from
    * @param startRow the start row to copy to
    * @param startCol the start col to copy to
    */
  public void copy(Picture fromPic, 
                 int startRow, int startCol)
  {
    Pixel fromPixel = null;
    Pixel toPixel = null;
    Pixel[][] toPixels = this.getPixels2D();
    Pixel[][] fromPixels = fromPic.getPixels2D();
    for (int fromRow = 0, toRow = startRow; 
         fromRow < fromPixels.length &&
         toRow < toPixels.length; 
         fromRow++, toRow++)
    {
      for (int fromCol = 0, toCol = startCol; 
           fromCol < fromPixels[0].length &&
           toCol < toPixels[0].length;  
           fromCol++, toCol++)
      {
        fromPixel = fromPixels[fromRow][fromCol];
        toPixel = toPixels[toRow][toCol];
        toPixel.setColor(fromPixel.getColor());
      }
    }   
  }
  
  public void copy(Picture fromPic, int startRow, int startCol, int begRow, int endRow, int begCol, int endCol)
  {
	  Pixel fromPixel = null;
	  Pixel toPixel = null;
	  Pixel[][] toPixels = this.getPixels2D();
	  Pixel[][] fromPixels = fromPic.getPixels2D();
	  for(int fromRow = begRow, toRow = startRow; fromRow < endRow && toRow < endRow + begRow; fromRow++,toRow++)
	  {
		  for(int fromCol = begCol, toCol = startCol; fromCol < endCol && toCol < endCol + begCol; fromCol++,toCol++)
		  {
			  fromPixel = fromPixels[fromRow][fromCol];
			  toPixel = toPixels[toRow][toCol];
			  toPixel.setColor(fromPixel.getColor());
		  }
	  }
  }

  /** Method to create a collage of several pictures */
  public void createCollage()
  {
    Picture flower1 = new Picture("flower1.jpg");
    Picture flower2 = new Picture("flower2.jpg");
    this.copy(flower1,0,0);
    this.copy(flower2,100,0);
    this.copy(flower1,200,0);
    Picture flowerNoBlue = new Picture(flower2);
    flowerNoBlue.zeroBlue();
    this.copy(flowerNoBlue,300,0);
    this.copy(flower1,400,0);
    this.copy(flower2,500,0);
    this.mirrorVertical();
    this.write("collage.jpg");
  }
  
  
  /** Method to show large changes in color 
    * @param edgeDist the distance for finding edges
    */
  public void edgeDetection(int edgeDist)
  {
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    Pixel[][] pixels = this.getPixels2D();
    Color rightColor = null;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; 
           col < pixels[0].length-1; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][col+1];
        rightColor = rightPixel.getColor();
        if (leftPixel.colorDistance(rightColor) > 
            edgeDist)
          leftPixel.setColor(Color.BLACK);
        else
          leftPixel.setColor(Color.WHITE);
      }
    }
  }
  
  public void keepOnlyBlue()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  for (Pixel[] rowArray : pixels)
	  {
	    for (Pixel pixelObj : rowArray)
	    {
	      pixelObj.setRed(0);
	      pixelObj.setGreen(0);
	    }
	  }
  }
  
  public void negate()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  for(Pixel[] row : pixels)
	  {
		  for(Pixel pix : row)
		  {
			  pix.setGreen(255 - pix.getGreen());
			  pix.setRed(255 - pix.getRed());
			  pix.setBlue(255 - pix.getBlue());
		  }
	  }
  }
  
  public void grayscale()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  for(Pixel[] row : pixels)
	  {
		  for(Pixel pix : row)
		  {
			  int avg = (pix.getGreen() + pix.getRed() + pix.getBlue())/3;
			  pix.setGreen(avg);
			  pix.setRed(avg);
			  pix.setBlue(avg);
		  }
	  }
  }
  
  public void fixUnderwater()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  for(Pixel[] row : pixels)
	  {
		  for(Pixel pix : row)
		  {
			  pix.setRed(pix.getRed() * 4);
		  }
	  }
  }
  
  public void mirrorVerticalRightToLeft()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  Pixel leftPixel = null;
	  Pixel rightPixel = null;
	  int width = pixels[0].length;
	  for (int row = 0; row < pixels.length; row++)
	  {
	    for (int col = width - 1; col > width / 2; col--)
	    {
	      leftPixel = pixels[row][col];
	      rightPixel = pixels[row][width - 1 - col];
	      rightPixel.setColor(leftPixel.getColor());
	    }
	  }
  }
  
  public void mirrorHorizontal()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  for(int col = 0; col < pixels[0].length; col++)
	  {
		  for(int row = 0; row < pixels.length / 2; row++)
		  {
			  pixels[pixels.length - row - 1][col].setColor(pixels[row][col].getColor());
		  }
	  }
  }
  
  public void mirrorHorizontalBotToTop()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  for(int col = 0; col < pixels[0].length; col++)
	  {
		  for(int row = pixels.length - 1; row > pixels.length / 2; row--)
		  {
			  pixels[pixels.length - row - 1][col].setColor(pixels[row][col].getColor());
		  }
	  }
  }
  
  public void mirrorDiagonal()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  int max = Math.min(pixels[0].length,pixels.length);
	  for(int row = 0; row < max; row++)
	  {
		  for(int col = 0; col < row; col++)
		  {
			  pixels[col][row].setColor(pixels[row][col].getColor());
		  }
	  }
  }
  
  public void mirrorArms()
  {
	  int mirrorPoint = 193;
	  Pixel leftPixel = null;
	  Pixel rightPixel = null;
	  Pixel[][] pixels = this.getPixels2D();
	  
	  // loop through the rows
	  for (int row = 164; row < 197; row++)
	  {
	    // loop from 13 to just before the mirror point
	    for (int col = 104; col < 295; col++)
	    {
	      
	      leftPixel = pixels[row][col];      
	      rightPixel = pixels[mirrorPoint - row + mirrorPoint][col];
	      rightPixel.setColor(leftPixel.getColor());
	    }
	  }
  }
  
  public void mirrorGull()
  {
	  int mirrorPoint = 349;
	  Pixel leftPixel = null;
	  Pixel rightPixel = null;
	  Pixel[][] pixels = this.getPixels2D();
	  for(int row = 236; row < 324; row++)
	  {
		  for(int col = 238; col < 345; col++)
		  {
			  leftPixel = pixels[row][col];
			  rightPixel = pixels[row][mirrorPoint - col + mirrorPoint];
			  rightPixel.setColor(leftPixel.getColor());
		  }
	  }
  }
  
  public void myCollage()
  {
	  Picture pic1 = new Picture("redMotorcycle.jpg");
	  Picture pic2 = new Picture("snowman.jpg");
	  pic1.zeroBlue();
	  this.copy(pic1, 10, 10, 120, 200, 140, 200);
	  pic2.keepOnlyBlue();
	  this.copy(pic2, 100, 15, 100,200,100,200);
	  pic1.grayscale();
	  this.copy(pic1, 200, 20, 100,150,150,200);
	  this.mirrorVertical();
  }
  
  public void edgeDetection2(int edgeDist)
  {
	  Picture copy = new Picture(this);
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    Pixel topPixel = null;
    Pixel botPixel = null;
    Color botColor = null;
    Pixel[][] copyPixels = copy.getPixels2D();
    Pixel[][] pixels = this.getPixels2D();
    Color rightColor = null;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; 
           col < pixels[0].length-1; col++)
      {
        leftPixel = copyPixels[row][col];
        rightPixel = copyPixels[row][col+1];
        rightColor = rightPixel.getColor();
        if (leftPixel.colorDistance(rightColor) > 
            edgeDist)
          pixels[row][col].setColor(Color.BLACK);
        else
          pixels[row][col].setColor(Color.WHITE);
      }
    }
    for(int col = 0; col < pixels[0].length; col++)
    {
    	for(int row = 0; row < pixels.length - 1; row++)
    	{
    		topPixel = copyPixels[row][col];
    		botPixel = copyPixels[row + 1][col];
    		botColor = botPixel.getColor();
    		if(topPixel.colorDistance(botColor) > edgeDist)
    		{
    			pixels[row][col].setColor(Color.BLACK);
    		}
    		else
    		{
    			pixels[row][col].setColor(Color.WHITE);
    		}
    	}
    }
  }
  
  public void myEdgeDetection(int edgeDist)
  {
	  Picture copy = new Picture(this);
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    Pixel topPixel = null;
    Pixel botPixel = null;
    Color botColor = null;
    Pixel[][] copyPixels = copy.getPixels2D();
    Pixel[][] pixels = this.getPixels2D();
    Color rightColor = null;
    for (int row = 0; row < pixels.length-1; row++)
    {
      for (int col = 0; 
           col < pixels[0].length-1; col++)
      {
        leftPixel = copyPixels[row][col];
        rightPixel = copyPixels[row + 1][col + 1];
        rightColor = rightPixel.getColor();
        if (leftPixel.colorDistance(rightColor) > 
            edgeDist)
          pixels[row][col].setColor(Color.BLACK);
        else
          pixels[row][col].setColor(Color.WHITE);
      }
    }
    for(int col = pixels[0].length - 1; col > 0; col--)
    {
    	for(int row = pixels.length - 1; row > 0; row--)
    	{
    		topPixel = copyPixels[row][col];
    		botPixel = copyPixels[row - 1][col - 1];
    		botColor = botPixel.getColor();
    		if(topPixel.colorDistance(botColor) > edgeDist)
    		{
    			pixels[row][col].setColor(Color.BLACK);
    		}
    		else
    		{
    			pixels[row][col].setColor(Color.WHITE);
    		}
    	}
    }
  }
  
  public void encode(Picture messagePic)
  {
	  Pixel[][] messagePixels = messagePic.getPixels2D();
	  Pixel[][] currPixels = this.getPixels2D();
	  Pixel currPixel = null;
	  Pixel messagePixel = null;
	  for(int r = 0; r < currPixels.length;r++)
	  {
		  for(int c = 0; c < currPixels[0].length;c++)
		  {
			  currPixel = currPixels[r][c];
			  messagePixel = messagePixels[r][c];
			  if(messagePixel.colorDistance(Color.BLACK)<50)
			  {
				  currPixel.setAlpha(254);
			  }
		  }
	  }
	  
  }
  
  public Picture decode()
  {
	  Pixel[][] currPixels = this.getPixels2D();
	  int height = this.getHeight();
	  int width = this.getWidth();
	  Picture message = new Picture(height,width);
	  Pixel[][] messagePixels = message.getPixels2D();
	  Pixel currPixel = null;
	  for(int r = 0; r < this.getHeight();r++)
	  {
		  for(int c = 0; c < this.getWidth();c++)
		  {
			  currPixel = currPixels[r][c];
			  messagePixels[r][c].setColor(Color.WHITE);
			  if(currPixel.getAlpha() < 255)
			  {
				  //System.err.println("kys");
				  messagePixels[r][c].setAlpha(255);
				  messagePixels[r][c].setColor(Color.BLACK);
			  }
		  }
	  }
	  return message;
  }
  
  public void sharpen(int x, int y, int w, int h)
  {
	  Pixel leftPixel = null;
	  Pixel topPixel = null;
	  Pixel[][] pixels = this.getPixels2D();
	  for(int a = y; a < h; a++)
	  {
		  for(int b = x; b < w; b++)
		  {
			  leftPixel = pixels[a][b - 1];
			  topPixel = pixels[a - 1][b];
			  Pixel current = pixels[a][b];
			  int finRed = current.getRed() + (int)(0.5 * ((current.getRed() - leftPixel.getRed()) + (current.getRed() - topPixel.getRed())));
			  if(finRed > 255)
			  {
				  finRed = 255;
			  }
			  else if(finRed < 0)
			  {
				  finRed = 0;
			  }
			  int finGreen = current.getGreen() + (int)(0.5 * ((current.getGreen() - leftPixel.getGreen()) + (current.getGreen() - topPixel.getGreen())));
			  if(finGreen > 255)
			  {
				  finGreen = 255;
			  }
			  else if(finGreen < 0)
			  {
				  finGreen = 0;
			  }
			  int finBlue = current.getBlue() + (int)(0.5 * ((current.getBlue() - leftPixel.getBlue()) + (current.getBlue() - topPixel.getBlue())));
			  if(finBlue > 255)
			  {
				  finBlue = 255;
			  }
			  else if(finBlue < 0)
			  {
				  finBlue = 0;
			  }
			  Color finColor = new Color(finRed,finGreen,finBlue);
			  pixels[a][b].setColor(finColor);
		  }
	  }
  }
  
  /* Main method for testing - each class in Java can have a main 
   * method 
   */
  public static void main(String[] args) 
  {
    Picture beach = new Picture("beach.jpg");
    beach.explore();
    beach.zeroBlue();
    beach.explore();
  }
  
} // this } is the end of class Picture, put all new methods before this
